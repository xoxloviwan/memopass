// Code generated by MockGen. DO NOT EDIT.
// Source: iwakho/gopherkeep/internal/srv/http/handlers (interfaces: Store)

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	io "io"
	model "iwakho/gopherkeep/internal/model"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddCard mocks base method.
func (m *MockStore) AddCard(arg0 context.Context, arg1 int, arg2 model.CardInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCard indicates an expected call of AddCard.
func (mr *MockStoreMockRecorder) AddCard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockStore)(nil).AddCard), arg0, arg1, arg2)
}

// AddFile mocks base method.
func (m *MockStore) AddFile(arg0 context.Context, arg1 int, arg2 io.Reader, arg3 *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFile indicates an expected call of AddFile.
func (mr *MockStoreMockRecorder) AddFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockStore)(nil).AddFile), arg0, arg1, arg2, arg3)
}

// AddPair mocks base method.
func (m *MockStore) AddPair(arg0 context.Context, arg1 int, arg2 model.PairInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPair", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPair indicates an expected call of AddPair.
func (mr *MockStoreMockRecorder) AddPair(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPair", reflect.TypeOf((*MockStore)(nil).AddPair), arg0, arg1, arg2)
}

// GetCards mocks base method.
func (m *MockStore) GetCards(arg0 context.Context, arg1, arg2, arg3 int) ([]model.CardInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.CardInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockStoreMockRecorder) GetCards(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockStore)(nil).GetCards), arg0, arg1, arg2, arg3)
}

// GetFiles mocks base method.
func (m *MockStore) GetFiles(arg0 context.Context, arg1, arg2, arg3 int) ([]model.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockStoreMockRecorder) GetFiles(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockStore)(nil).GetFiles), arg0, arg1, arg2, arg3)
}

// GetPairs mocks base method.
func (m *MockStore) GetPairs(arg0 context.Context, arg1, arg2, arg3 int) ([]model.PairInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.PairInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairs indicates an expected call of GetPairs.
func (mr *MockStoreMockRecorder) GetPairs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairs", reflect.TypeOf((*MockStore)(nil).GetPairs), arg0, arg1, arg2, arg3)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// NewUser mocks base method.
func (m *MockStore) NewUser(arg0 context.Context, arg1 model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockStoreMockRecorder) NewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockStore)(nil).NewUser), arg0, arg1)
}
