# https://taskfile.dev

version: '3'

vars:
  VERSION: v1.0.0
  COMMIT: 
    sh: git rev-parse --short HEAD
  LDFLAGS: "-X main.buildVersion={{.VERSION}} -X main.buildDate={{ now | date \"2006-01-02\" }} -X main.buildCommit={{.COMMIT}}"

tasks:
  build_cli:
    desc: Build gophkeeper cli
    cmds:
      - go build -ldflags "{{.LDFLAGS}}" ./cmd/gophkeeper/.
#    silent: true
  
  build_server:
    desc: Build gophkeeper server
    cmds:
      - go build -ldflags "{{.LDFLAGS}}" ./cmd/server/.

  build:
    desc: Build all
    cmds:
      - go mod tidy
      - task: lint
      - task: cover
      - task: build_cli
      - task: build_server

  install_mkcert:
    desc: Install mkcert
    cmds:
    - cmd: |
        if ! command -v mkcert &> /dev/null; then
          echo "Installing mkcert..."
          powershell -Command "Start-Process PowerShell -Verb RunAs -ArgumentList 'choco','install','mkcert'"
          mkcert -install
        else
          echo "mkcert is already installed."
        fi
      platforms: [windows]

  make_cert:
    desc: Make cert for dev
    cmds:
      - |
        if [ ! -d "certs" ]; then
          mkdir certs; cd certs; mkcert localhost 127.0.0.1
          mv certs/localhost+1.pem certs/cert.pem
          mv certs/localhost+1-key.pem certs/key.pem
        else
          echo "certs folder already exists."
        fi

  install_sqlite:
    desc: Install sqlite3
    cmds:
    - cmd: |
          if ! command -v sqlite3 &> /dev/null; then
            echo "Installing sqlite3..."
            winget install SQLite.SQLite
          else
            echo "sqlite3 is already installed."
          fi
      platforms: [windows]
    

  install_migrate:
    desc: Install migrate
    cmds:
    - |
      if ! command -v migrate &> /dev/null; then
        echo "Installing migrate..."
        export CGO_ENABLED=1
        go install -tags 'sqlite3' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      else
        echo "migrate is already installed."
      fi
  
  run_migrations:
    vars:
      dbpath: ./db/memopass.db
    cmds:
      - migrate -database sqlite3://{{.dbpath}}?query -path db/migrations up
  
  install_linter:
    desc: Install linter
    cmds:
      - |
        if ! command -v golangci-lint &> /dev/null; then
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0
        else
          echo "golangci-lint is already installed."
        fi

  lint:
    desc: Run linter
    cmds:
      - golangci-lint run

  test:
    desc: Run tests
    cmds:
      - go test ./...

  install_coverage:
    desc: Install coverage
    cmds:
      - |
        if ! command -v go-test-coverage &> /dev/null; then
          go install github.com/vladopajic/go-test-coverage/v2@v2.10.1
        else
          echo "go-test-coverage is already installed."
        fi
      
  cover:
    desc: Run coverage
    cmds:
      - go test ./... -coverprofile=./cover.out -coverpkg=./...
      - go tool cover -func ./cover.out
      - go-test-coverage --config=./.testcoverage.yml

  coverv:
    desc: Open coverage in browser
    cmds:
      - go tool cover -html cover.out

  install:
    desc: Install all
    cmds:
      - task: install_sqlite
      - task: install_migrate
      - task: install_linter
      - task: install_coverage
      - task: run_migrations
  
  run:
    desc: Run server
    cmds:
    - ./server
  
  run_tls:
    desc: Run server with tls
    cmds:
      - task: install_mkcert
      - task: make_cert
      - ./server -c certs/cert.pem -k certs/key.pem
  
  run_cli:
    desc: Run cli
    cmds:
      - ./gophkeeper

  run_cli_tls:
    desc: Run cli with tls
    cmds:
      - task: install_mkcert
      - task: make_cert    
      - ./gophkeeper -https -r certs/cert.pem
  

  make_tests:
    desc: Make tests for views with "github.com/knz/catwalk"
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - go test . -args -rewrite
